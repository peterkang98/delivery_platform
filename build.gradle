plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.7'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'xyz.sparta-project'
version = '0.0.1-SNAPSHOT'
description = '배달 플랫폼 구현'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
    runtimeOnly 'com.mysql:mysql-connector-j'
//    runtimeOnly 'com.h2database:h2'

    // 애플리케이션 상태 모니터링 및 메트릭 수집용
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // OAuth2 클라이언트 기능 (소셜 로그인 등 외부 인증 서버 연동 시 사용)
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    //OAuth2 리소스 서버 기능 (JWT 기반 인증/인가 처리용)
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

    //keyCloak
    implementation 'org.keycloak:keycloak-admin-client:26.0.7'

	// QueryDSL 의존성
    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.1.0:jakarta'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'


    //.env 로드 의존성
	implementation 'me.paulschwarz:spring-dotenv:4.0.0'

    // DevTools (개발 환경 전용)
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    developmentOnly 'com.h2database:h2'

    // 추가 라이브러리
    developmentOnly 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'
    
    // 스웨거 명세서
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.4'
    
    compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testRuntimeOnly 'com.h2database:h2'
}

// QueryDSL 설정
def querydslDir = layout.buildDirectory.dir("generated/querydsl").get().asFile

sourceSets {
    main.java.srcDirs += [ querydslDir ]
}

tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

clean.doLast {
    file(querydslDir).deleteDir()
}


tasks.named('test') {
	useJUnitPlatform()
}
